from flask import Flask, request, jsonify
import datetime

app = Flask(__name__)

# In-memory storage for todos (in a real app, you'd use a database)
todos = {}
todo_id_counter = 1

# GET all todos
@app.route('/todos', methods=['GET'])
def get_todos():
    return jsonify({'todos': todos}), 200

# GET a specific todo by ID
@app.route('/todos/<int:todo_id>', methods=['GET'])
def get_todo(todo_id):
    todo = todos.get(todo_id)
    if todo is None:
        return jsonify({'error': 'Todo not found'}), 404
    return jsonify({'todo': todo}), 200

# POST - Create a new todo
@app.route('/todos', methods=['POST'])
def create_todo():
    global todo_id_counter
    data = request.get_json()
    
    if not data or 'title' not in data:
        return jsonify({'error': 'Title is required'}), 400
    
    todo = {
        'id': todo_id_counter,
        'title': data['title'],
        'description': data.get('description', ''),
        'created_at': datetime.datetime.now().isoformat(),
        'completed': False
    }
    
    todos[todo_id_counter] = todo
    todo_id_counter += 1
    return jsonify({'todo': todo}), 201

# PUT - Update a todo
@app.route('/todos/<int:todo_id>', methods=['PUT'])
def update_todo(todo_id):
    if todo_id not in todos:
        return jsonify({'error': 'Todo not found'}), 404
    
    data = request.get_json()
    if not data:
        return jsonify({'error': 'No data provided'}), 400
    
    todo = todos[todo_id]
    todo['title'] = data.get('title', todo['title'])
    todo['description'] = data.get('description', todo['description'])
    todo['completed'] = data.get('completed', todo['completed'])
    
    return jsonify({'todo': todo}), 200

# DELETE - Delete a todo
@app.route('/todos/<int:todo_id>', methods=['DELETE'])
def delete_todo(todo_id):
    if todo_id not in todos:
        return jsonify({'error': 'Todo not found'}), 404
    
    del todos[todo_id]
    return '', 204

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Not found'}), 404

@app.errorhandler(400)
def bad_request(error):
    return jsonify({'error': 'Bad request'}), 400

if __name__ == '__main__':
    # Run the app
    app.run(debug=True, host='0.0.0.0', port=5000)
